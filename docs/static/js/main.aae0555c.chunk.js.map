{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/GetGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","response","json","data","gifsList","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","console","log","useFetchGifs","gif","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"6MAkCeA,EA/BK,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,cAAkB,EAEAC,mBAAS,IAFT,mBAE7BC,EAF6B,KAEjBC,EAFiB,KAgBpC,OACI,0BAAMC,SATW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,GAC1BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAEhDN,EAAc,MAKV,2BACIO,KAAK,OACLC,MAAQT,EACRU,SAjBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,YCIhBG,EAVK,SAAC,GAAsB,EAApBC,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAE9B,OACI,yBAAKC,UAAU,0CACX,yBAAKC,IAAMF,EAAKG,IAAMJ,IACtB,2BAAKA,K,uBCNJK,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbN,EAFa,iDAEoCO,UAAUF,GAF9C,+DAIIG,MAAOR,GAJX,cAIbS,EAJa,gBAOEA,EAASC,OAPX,uBAOZC,EAPY,EAOZA,KAEDC,EAAWD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC9B,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAbvB,kBAgBZY,GAhBY,4CAAH,sDC2BLK,EAvBC,SAAC,GAAc,IAAbZ,EAAY,EAAZA,SAAY,ECFF,SAAEA,GAAc,IAAD,EAEbrB,mBAAU,CAChC2B,KAAM,GACNO,SAAS,IAJ0B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAoBvC,OAXCC,qBAAU,WACNjB,EAASC,GACJiB,MAAM,SAAAC,GACHC,QAAQC,IAAIF,GACZH,EAAS,CACVT,KAAMY,EACNL,SAAS,SAGjB,CAAEb,IAECc,EDhBmBO,CAAcrB,GAAhCM,EAFkB,EAElBA,KAAMO,EAFY,EAEZA,QAEd,OACI,kBAAC,WAAD,KACI,wBAAIjB,UAAU,0CAA2CI,GACvDa,GAAW,uBAAGjB,UAAU,yCAAb,eACZ,yBAAKA,UAAU,aAERU,EAAKE,KAAK,SAAAc,GAAG,OACT,kBAAC,EAAD,eACIC,IAAKD,EAAI7B,IAEL6B,UEmBjBE,EAlCM,WAAK,MAGe7C,mBAAS,CAAC,sBAHzB,mBAGdQ,EAHc,KAGFT,EAHE,KActB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAGA,4BAEOS,EAAWqB,KAAK,SAAAR,GAAQ,OACpB,kBAAC,EAAD,CACCuB,IAAKvB,EACLA,SAAUA,UCzBlCyB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.aae0555c.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ({setCategories})=> {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e)=> {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e)=> {\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 2){\r\n            setCategories(categories =>[ inputValue, ...categories ]);\r\n        }\r\n        setInputValue('');\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input\r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","import React from 'react'\r\n\r\nconst GifGridItem = ( {id, title, url} )=> {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url} alt={ title}/>\r\n            <p>{ title }</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GifGridItem","\r\nexport const getGifs = async ( category) =>{\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=2andotrzyCGnYVUNKnyAqFQU7mhXZny2`;\r\n\r\n    const response = await fetch( url );\r\n\r\n    //haga la desestruturaciÃ³n de la respuesta para quedarme con data que contiene la info que preciso\r\n    const {data} = await response.json();\r\n\r\n    const gifsList = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifsList;\r\n}","import React, { Fragment } from 'react'\r\nimport GifGridItem from './GifGridItem';\r\n\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nconst GifGrid = ({category})=>{\r\n\r\n    const { data, loading } = useFetchGifs( category );\r\n\r\n    return(\r\n        <Fragment>\r\n            <h3 className=\"card animate__animated animate__fadeIn\">{ category }</h3>\r\n            { loading && <p className=\"card animate__animated animate__flash\">Cargando...</p> }\r\n             <div className=\"card-grid\">\r\n                {\r\n                    data.map( gif=> (\r\n                        <GifGridItem \r\n                            key={gif.id}\r\n                            //Paso como props la desestruturacion del objecto \r\n                            {...gif}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default GifGrid\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from '../helpers/GetGifs';\r\n\r\nexport const useFetchGifs = ( category )=> {\r\n\r\n    const [state, setState] = useState ({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    //mediante este hook me aseguro que ejecuto una sola ve el codigo\r\n    // pasandole el array de dependencias vacio\r\n     useEffect(()=> {\r\n         getGifs( category )\r\n             .then( imgs => {\r\n                 console.log(imgs);\r\n                 setState({\r\n                data: imgs,\r\n                loading: false\r\n             });\r\n            })\r\n     }, [ category ])\r\n\r\n    return state; // {data: [], loading: true}\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () =>{\r\n\r\n    // , 'League of Legends', 'Diablo III'\r\n     const [categories, setCategories] = useState(['World of Warcraft'])\r\n\r\n    /*const handleAdd = ()=> {\r\n        Con el operador spread extraigo los valores previos de categories\r\n        setCategories([...categories, 'Overwatch']);\r\n        \r\n        setCategories puede recibir un callback donde el primer argumento\r\n        es valor del estado anterior\r\n        setCategories(catego=> [...catego, 'Overwatch']);\r\n    }*/\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr />\r\n            {/* <button onClick={handleAdd}>Agregar</button> */}\r\n\r\n            <ol>\r\n                {\r\n                   categories.map( category => (\r\n                       <GifGrid \r\n                        key={category}\r\n                        category={category} />\r\n                   ))  \r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}